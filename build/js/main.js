"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  var PROMO_END_DATE = new Date('2024-10-22T18:30:00.000Z'); //-3 hours
  var apiURL = 'https://fav-prom.com/api_shakhtar_predictor';
  var resultsTable = document.querySelector('.table__body-scroll'),
    unauthMsgs = document.querySelectorAll('.unauth-msg'),
    youAreInBtns = document.querySelectorAll('.took-part'),
    predictionBtn = document.querySelector('.predict__btn'),
    yourBetTxt = document.querySelector('.predict__yourBet');
  var ukLeng = document.querySelector('#ukLeng');
  var enLeng = document.querySelector('#enLeng');
  var locale = 'uk';
  if (ukLeng) locale = 'uk';
  if (enLeng) locale = 'en';
  var i18nData = {};
  var userId;
  // userId = 100300268

  function loadTranslations() {
    return fetch("".concat(apiURL, "/translates/").concat(locale)).then(function (res) {
      return res.json();
    }).then(function (json) {
      i18nData = json;
      translate();
      var mutationObserver = new MutationObserver(function (mutations) {
        translate();
      });
      mutationObserver.observe(document.getElementById('shakhtar'), {
        childList: true,
        subtree: true
      });
    });
  }
  function translate() {
    var elems = document.querySelectorAll('[data-translate]');
    if (elems && elems.length) {
      elems.forEach(function (elem) {
        var key = elem.getAttribute('data-translate');
        elem.innerHTML = translateKey(key);
        elem.removeAttribute('data-translate');
      });
    }
    if (locale === 'en') {
      mainPage.classList.add('en');
    }
    refreshLocalizedClass();
  }
  function translateKey(key) {
    if (!key) {
      return;
    }
    return i18nData[key] || '*----NEED TO BE TRANSLATED----*   key:  ' + key;
  }
  function refreshLocalizedClass(element, baseCssClass) {
    if (!element) {
      return;
    }
    for (var _i = 0, _arr = ['uk', 'en']; _i < _arr.length; _i++) {
      var lang = _arr[_i];
      element.classList.remove(baseCssClass + lang);
    }
    element.classList.add(baseCssClass + locale);
  }
  var request = function request(link, extraOptions) {
    return fetch(apiURL + link, _objectSpread({
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }, extraOptions || {})).then(function (res) {
      return res.json();
    });
  };
  function getUsers() {
    return request('/users');
  }
  var InitPage = function InitPage() {
    getUsers().then(function (users) {
      renderUsers(users);
      translate();
    });
  };
  function init() {
    initScoreSelector(1);
    initScoreSelector(2);
    initPredictionBtn();
    if (window.store) {
      var state = window.store.getState();
      userId = state.auth.isAuthorized && state.auth.id || '';
      InitPage();
    } else {
      InitPage();
      var c = 0;
      var i = setInterval(function () {
        if (c < 50) {
          if (!!window.g_user_id) {
            userId = window.g_user_id;
            InitPage();
            checkUserAuth();
            clearInterval(i);
          }
        } else {
          clearInterval(i);
        }
      }, 200);
    }
    checkUserAuth();
  }
  function renderUsers(users) {
    populateUsersTable(users, userId, resultsTable);
  }
  function populateUsersTable(users, currentUserId, table) {
    table.innerHTML = '';
    if (users && users.length) {
      var currentUser = userId && users.find(function (user) {
        return user.userid === currentUserId;
      });
      if (currentUser) {
        displayUser(currentUser, true, table);
      }
      users.forEach(function (user) {
        if (user.userid !== currentUserId) {
          displayUser(user, false, table);
        }
      });
    }
  }
  function displayUser(user, isCurrentUser, table) {
    var additionalUserRow = document.createElement('div');
    additionalUserRow.classList.add('table__row');
    if (isCurrentUser) {
      updateLastPrediction(user);
      additionalUserRow.classList.add('you');
    }
    additionalUserRow.innerHTML = "\n                        <div class=\"table__row-item\">".concat(isCurrentUser ? user.userid : maskUserId(user.userid), "</div>\n                        <div class=\"table__row-item\">").concat(formatDateString(user.lastForecast), "</div>\n                        <div class=\"table__row-item\">").concat(user.team1, ":").concat(user.team2, "</div>\n                        <div class=\"table__row-item\">**************</div>\n                    ");
    table.append(additionalUserRow);
  }
  function updateLastPrediction(data) {
    var team1Label = document.querySelector('.scoreTeam1');
    var team2Label = document.querySelector('.scoreTeam2');
    team1Label.innerHTML = data.team1;
    team2Label.innerHTML = data.team2;

    // const trueBet = document.querySelector('.predict__bet-true');
    // const falseBet = document.querySelector('.predict__bet-false');
    // if (user.betConfirmed) {
    //     trueBet.classList.remove('hide');
    //     falseBet.classList.add('hide');
    // } else {
    //     trueBet.classList.add('hide');
    //     falseBet.classList.remove('hide');
    // }
  }

  function formatDateString(dateString) {
    var date = new Date(dateString);
    var day = date.getDate().toString().padStart(2, '0');
    var month = (date.getMonth() + 1).toString().padStart(2, '0');
    var year = date.getFullYear();
    var hours = date.getHours().toString().padStart(2, '0');
    var minutes = date.getMinutes().toString().padStart(2, '0');
    return "".concat(day, ".").concat(month, ".").concat(year, " / ").concat(hours, ":").concat(minutes);
  }
  function maskUserId(userId) {
    return "**" + userId.toString().slice(2);
  }
  var checkUserAuth = function checkUserAuth() {
    if (userId) {
      unauthMsgs.forEach(function (item) {
        return item.classList.add('hide');
      });
      youAreInBtns.forEach(function (item) {
        return item.classList.remove('hide');
      });
    }
  };
  var scorePrediction = {
    team1: 0,
    team2: 0
  };
  function initScoreSelector(teamNumber) {
    var minusBtn = document.querySelector(".team".concat(teamNumber, "-minus"));
    var plusBtn = document.querySelector(".team".concat(teamNumber, "-plus"));
    var scorePanel = document.querySelector(".predictionTeam".concat(teamNumber));
    minusBtn.addEventListener('click', function () {
      var fieldTag = "team".concat(teamNumber);
      var currentScore = scorePrediction[fieldTag];
      scorePrediction[fieldTag] = Math.max(currentScore - 1, 0);
      scorePanel.innerHTML = scorePrediction[fieldTag];
    });
    plusBtn.addEventListener('click', function () {
      var fieldTag = "team".concat(teamNumber);
      var currentScore = scorePrediction[fieldTag];
      scorePrediction[fieldTag] = Math.min(currentScore + 1, 99);
      scorePanel.innerHTML = scorePrediction[fieldTag];
    });
  }
  var isRequestInProgress;
  function initPredictionBtn() {
    document.addEventListener('click', function (e) {
      if (!!e.target.closest('.predict__btn')) {
        if (isRequestInProgress) {
          return;
        }
        yourBetTxt.classList.remove("hide");
        setTimeout(function () {
          youAreInBtns.forEach(function (item) {
            return item.classList.remove('showBtn');
          });
        }, 5000);
        youAreInBtns.forEach(function (item) {
          return item.classList.add('showBtn');
        });
        isRequestInProgress = true;
        predictionBtn.classList.add("pointer-none");
        request('/bet', {
          method: 'POST',
          body: JSON.stringify({
            userid: userId,
            team1: scorePrediction.team1,
            team2: scorePrediction.team2
          })
        }).then(function (res) {
          isRequestInProgress = false;
          predictionBtn.classList.remove("pointer-none");
          InitPage();
        })["catch"](function (e) {
          isRequestInProgress = false;
          predictionBtn.classList.remove("pointer-none");
        });
      }
    });
  }
  loadTranslations().then(init);
  var mainPage = document.querySelector('.fav-page');
  setTimeout(function () {
    return mainPage.classList.add('overflow');
  }, 1000);
  var currentDate = new Date();
  if (currentDate >= PROMO_END_DATE) {
    youAreInBtns.forEach(function (item) {
      return item.classList.add('block-btn');
    });
  }

  // popups
  function setPopups(popups, closeBtns, showBtns) {
    popups = document.querySelectorAll("".concat(popups));
    closeBtns = document.querySelectorAll("".concat(closeBtns));
    showBtns = document.querySelectorAll("".concat(showBtns));
    showBtns.forEach(function (showBtn, showBtnIndex) {
      showBtn.addEventListener("click", function () {
        popups.forEach(function (popup, popupIndex) {
          if (popupIndex === showBtnIndex) {
            popup.classList.toggle("active");
          } else {
            popup.classList.remove("active");
          }
        });
      });
    });
    closeBtns.forEach(function (showBtn, closeBtnIndex) {
      showBtn.addEventListener("click", function () {
        popups.forEach(function (popup, popupIndex) {
          if (popupIndex === closeBtnIndex) {
            popup.classList.remove("active");
          }
        });
      });
    });
  }
  setPopups(".guide__list-popup", ".guide__list-popup-close", ".guide__list-btn");

  // scroll add anim

  var tableLightning = document.querySelector('.table');
  var tableCup = document.querySelector('.table__cup');
  var tablePers = document.querySelector('.table__pers');
  var prizeLightning = document.querySelector('.prize');
  var promoTitle = document.querySelector('.promo__title');
  function animateOnScroll(element, animationClass) {
    var options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.2
    };
    var observer = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          entry.target.classList.add(animationClass);
        } else {
          entry.target.classList.remove(animationClass);
        }
      });
    }, options);
    observer.observe(element);
  }
  animateOnScroll(tableLightning, "tableLightning");
  animateOnScroll(tableCup, "fadeInLeft");
  animateOnScroll(tablePers, "fadeInRight");
  animateOnScroll(prizeLightning, "prizeLightning");
  var titles = document.querySelectorAll(".title");
  titles.forEach(function (title) {
    animateOnScroll(title, "fadeIn");
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
